datasource db {
    provider = "postgresql" // or other supported DB providers
    url      = env("DATABASE_URL")
    schemas  = ["public"]
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"] // Enables support for multiple schemas
}

model UserProfile {
    id           String                   @id @default(uuid())
    user_id      String                   @unique
    username     String
    subscription UserProfileSubscription? @relation(name: "UserProfileToSubscription") // Removed onDelete from here
    firstName    String
    lastName     String
    email        String                   @unique
    country      String
    state        String

    city                        String
    personalNum                 String
    createdAt                   DateTime                      @default(now())
    updatedAt                   DateTime                      @updatedAt
    connectedAccounts           ConnectedAccounts?
    leadPreferences             LeadPreferences?
    savedSearches               SavedSearch[]
    notificationPreferences     NotificationPreferences?
    integrations                Integration[]
    companyInfo                 CompanyInfo?
    aIKnowledgebase             AIKnowledgebase?
    billingHistory              BillingHistoryItem[]
    paymentDetails              PaymentDetails?
    twoFactorAuth               TwoFactorAuth?
    teamMembers                 TeamMember[]
    activityLog                 ActivityLog[]
    securitySettings            SecuritySettings?
    userProfileSubscriptionId   String?
    CompanyCampaignsUserProfile CompanyCampaignsUserProfile[]
    CampaignAnalytics           CampaignAnalytics[]
    LeadList                    LeadList[]
    KanbanState                 KanbanState[]
    KanbanTask                  KanbanTask[]

    @@index([email], name: "idx_email")
    @@index([user_id], name: "idx_uniqueIdentifier")
    @@schema("public") // Explicitly state it belongs to public
}

model ConnectedAccounts {
    id          String       @id @default(uuid())
    user_id     String?      @unique
    userProfile UserProfile? @relation(fields: [user_id], references: [user_id], onDelete: SetNull)

    oauthData OAuthData[] @relation("OAuthDataConnectedAccounts")

    @@index([user_id], name: "idx_connected_accounts_user")
    @@schema("public") // Explicitly state it belongs to public
}

model OAuthData {
    id              String        @id @default(uuid())
    provider        OAuthProvider
    username        String?
    pageId          String?
    companyId       String?
    handle          String?
    accessToken     String
    refreshToken    String?
    expiresIn       Int
    tokenType       String
    scope           String?
    lastRefreshedAt DateTime?

    connectedAccountId String
    connectedAccounts  ConnectedAccounts @relation(fields: [connectedAccountId], references: [id], name: "OAuthDataConnectedAccounts")

    @@index([provider], name: "idx_oauth_provider_user")
    @@schema("public") // Explicitly state it belongs to public
}

enum OAuthProvider {
    FACEBOOK
    INSTAGRAM
    LINKEDIN
    TWITTER

    @@schema("public") // Explicitly state it belongs to public
}

model UserProfileSubscription {
    id                   String             @id @default(uuid())
    user_id              String             @unique
    stripeSubscriptionID String
    name                 String
    type                 SubscriptionType
    status               SubscriptionStatus
    price                String
    aiCredits            AICredits?
    leads                LeadCredits?
    skipTraces           SkipTraceCredits?
    renewalDate          DateTime
    createdAt            DateTime
    planDetails          String
    userProfile          UserProfile        @relation(fields: [user_id], references: [user_id], name: "UserProfileToSubscription", map: "FK_UserProfile_Subscription", onDelete: Cascade)

    @@index([user_id], name: "idx_userProfile_subscription")
    @@schema("public") // Explicitly state it belongs to public
}

model LeadPreferences {
    id                String      @id @default(uuid())
    user_id           String      @unique
    preferredLocation Json
    industry          String
    minLeadQuality    Int
    maxBudget         Float
    userProfile       UserProfile @relation(fields: [user_id], references: [user_id])

    @@schema("public") // Explicitly state it belongs to public
}

model SavedSearch {
    id             String      @id @default(uuid())
    user_id        String
    name           String
    searchCriteria Json
    createdAt      DateTime
    userProfile    UserProfile @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

    @@index([user_id], name: "idx_savedsearch_user") // ✅ Add an index for faster lookups
    @@schema("public") // Explicitly state it belongs to public
}

model Integration {
    id      String @id @default(uuid())
    user_id String @unique

    platform    String
    apiKey      String
    status      IntegrationStatus
    userProfile UserProfile       @relation(fields: [user_id], references: [user_id])

    @@schema("public") // Explicitly state it belongs to public
}

model TwoFactorAuth {
    id            String           @id @default(uuid())
    user_id       String           @unique
    totpSecret    String?
    backupCodes   Json?
    methods       TwoFactorMethods
    lastUpdatedAt DateTime?
    userProfile   UserProfile      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    TeamMember    TeamMember[]

    @@index([user_id], name: "idx_2fa_user") // ✅ Added index for performance
    @@schema("public") // Explicitly state it belongs to public
}

model AuditLog {
    id        String   @id @default(uuid())
    user_id   String
    action    String
    timestamp DateTime @default(now())
    ipAddress String?
    metadata  Json?

    @@schema("public") // Explicitly state it belongs to public
}

model UserPermissions {
    id                    String     @id @default(uuid())
    canGenerateLeads      Boolean
    canStartCampaigns     Boolean
    canViewReports        Boolean
    canManageTeam         Boolean
    canManageSubscription Boolean
    canAccessAI           Boolean
    canMoveCompanyTasks   Boolean
    canEditCompanyProfile Boolean
    teamMemberId          String     @unique
    teamMember            TeamMember @relation(fields: [teamMemberId], references: [id])

    @@schema("public") // Explicitly state it belongs to public
}

model NotificationPreferences {
    id                       String       @id @default(uuid())
    user_id                  String       @unique @default(uuid()) // ✅ UUID Foreign Key    emailNotifications       Boolean
    smsNotifications         Boolean
    notifyForNewLeads        Boolean
    notifyForCampaignUpdates Boolean
    userProfile              UserProfile  @relation(fields: [user_id], references: [id], onDelete: Cascade)
    TeamMember               TeamMember[]

    @@index([user_id], name: "idx_notifications_user")
    @@schema("public") // Explicitly state it belongs to public
}

model TeamMember {
    id                        String                   @id @default(uuid())
    firstName                 String
    lastName                  String
    email                     String                   @unique
    role                      TeamMemberRole
    permissions               UserPermissions?
    notificationPreferences   NotificationPreferences? @relation(fields: [notificationPreferencesId], references: [id])
    twoFactorAuth             TwoFactorAuth?           @relation(fields: [twoFactorAuthId], references: [id])
    activityLog               ActivityLog[]
    userProfile               UserProfile              @relation(fields: [user_id], references: [user_id])
    user_id                   String
    notificationPreferencesId String?
    twoFactorAuthId           String?

    @@schema("public") // Explicitly state it belongs to public
}

model ActivityLog {
    id             String       @id @default(uuid())
    user_id        String
    action         String
    timestamp      DateTime
    performedBy    String
    taskTracking   TaskTracking @relation(fields: [taskTrackingId], references: [id])
    TeamMember     TeamMember?  @relation(fields: [teamMemberId], references: [id])
    teamMemberId   String?
    taskTrackingId String
    userAgent      String?
    userProfile    UserProfile  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

    @@index([user_id], name: "idx_activityLog") // ✅ Add an index for faster lookups
    @@schema("public") // Explicitly state it belongs to public
}

model TaskTracking {
    id              String         @id @default(uuid())
    totalTasks      Int
    tasksAssigned   Int
    tasksCompleted  Int
    tasksInProgress Int
    assignedTasks   Json
    taskHistory     TaskActivity[]
    ActivityLog     ActivityLog[]

    @@schema("public") // Explicitly state it belongs to public
}

model TaskActivity {
    id             String       @id @default(uuid())
    action         String
    timestamp      DateTime
    performedBy    String
    taskTrackingId String
    taskTracking   TaskTracking @relation(fields: [taskTrackingId], references: [id])

    @@schema("public") // Explicitly state it belongs to public
}

model SecuritySettings {
    id                String      @id @default(uuid())
    passwordHash      String
    lastLoginTime     DateTime?
    passwordUpdatedAt DateTime?
    user_id           String      @unique
    userProfile       UserProfile @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@schema("public") // Explicitly state it belongs to public
}

model CompanyInfo {
    id                      String                      @id @default(uuid())
    user_id                 String                      @unique
    companyName             String
    assets                  Json
    webhook                 String?
    socialMediaTags         Json
    companyLogo             String
    GHLID                   String
    forwardingNumber        String
    outreachEmail           String
    explainerVideo          String?
    campaigns               CompanyCampaignsUserProfile @relation(fields: [companyCampaignsuser_id], references: [id])
    campaignAnalytics       CampaignAnalytics[]
    leads                   LeadTypeGlobal[]
    leadLists               LeadList[]
    kanbanTasks             KanbanState                 @relation(fields: [kanbanStateId], references: [id])
    userProfile             UserProfile                 @relation(fields: [user_id], references: [user_id])
    companyCampaignsuser_id String
    kanbanStateId           String

    @@schema("public") // Explicitly state it belongs to public
}

model CompanyCampaignsUserProfile {
    id              String                @id @default(uuid())
    user_id         String
    textCampaigns   TextCampaign[]
    emailCampaigns  EmailCampaign[]
    socialCampaigns SocialMediaCampaign[]
    callCampaigns   CallCampaign[]
    userProfile     UserProfile           @relation(fields: [user_id], references: [user_id])
    CompanyInfo     CompanyInfo[]

    @@schema("public") // Explicitly state it belongs to public
}

model CampaignAnalytics {
    id             String       @id @default(uuid())
    user_id        String
    campaignId     String
    type           CampaignType
    deliveredCount Int
    openedCount    Int
    bouncedCount   Int
    failedCount    Int
    userProfile    UserProfile  @relation(fields: [user_id], references: [id], onDelete: Cascade)
    CompanyInfo    CompanyInfo? @relation(fields: [companyInfoId], references: [id], onDelete: Cascade)
    companyInfoId  String?

    @@index([campaignId], name: "idx_campaignId")
    @@index([user_id], name: "idx_campaign_user")
    @@index([type], name: "idx_campaign_type") // New index added
    @@schema("public") // Explicitly state it belongs to public
}

enum CampaignType {
    email
    text
    call
    social

    @@schema("public") // Explicitly state it belongs to public
}

model LeadTypeGlobal {
    id            String       @id @default(uuid())
    firstName     String
    lastName      String
    email         String
    phone         String
    summary       String
    bed           Int
    bath          Int
    sqft          Int
    status        LeadStatus
    leadScore     Int          @default(0)
    followUp      DateTime?
    lastUpdate    DateTime
    address1      String
    campaignID    String?
    socials       SocialLinks?
    companyInfo   CompanyInfo  @relation(fields: [companyInfoId], references: [id], onDelete: Cascade)
    companyInfoId String
    LeadList      LeadList?    @relation(fields: [leadListId], references: [id])
    leadListId    String?

    @@index([companyInfoId], name: "idx_companyInfoId")
    @@index([email], name: "idx_leadEmail")
    @@index([leadScore], name: "idx_leadScore") // New index added
    @@schema("public") // Explicitly state it belongs to public
}

enum LeadStatus {
    New_Lead
    Contacted
    Closed
    Lost

    @@schema("public") // Explicitly state it belongs to public
}

model SocialLinks {
    id        String         @id @default(uuid())
    facebook  String?
    linkedin  String?
    instagram String?
    twitter   String?
    leadId    String         @unique
    lead      LeadTypeGlobal @relation(fields: [leadId], references: [id], onDelete: Cascade)

    @@index([leadId], name: "idx_social_leadId")
    @@schema("public") // Explicitly state it belongs to public
}

model LeadList {
    id             String           @id @default(uuid())
    user_id        String
    listName       String
    uploadDate     DateTime
    leads          LeadTypeGlobal[]
    records        Int
    phone          Int
    dataLink       String
    socials        SocialsCount     @relation(fields: [socialsCountId], references: [id])
    emails         Int
    userProfile    UserProfile      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    CompanyInfo    CompanyInfo?     @relation(fields: [companyInfoId], references: [id], onDelete: Cascade)
    companyInfoId  String?
    socialsCountId String

    @@index([user_id], name: "idx_leadlist_user")
    @@schema("public") // Explicitly state it belongs to public
}

model SocialsCount {
    id        String     @id @default(uuid())
    facebook  Int?
    linkedin  Int?
    instagram Int?
    twitter   Int?
    LeadList  LeadList[]

    @@schema("public") // Explicitly state it belongs to public
}

model KanbanState {
    id          String         @id @default(uuid())
    user_id     String
    tasks       KanbanTask[]
    columns     KanbanColumn[]
    draggedTask String?
    userProfile UserProfile    @relation(fields: [user_id], references: [user_id])
    CompanyInfo CompanyInfo[]

    @@schema("public") // Explicitly state it belongs to public
}

model KanbanTask {
    id            String       @id @default(uuid())
    user_id       String
    title         String
    description   String?
    status        String
    priority      LeadPriority
    dueDate       DateTime?
    assignedTo    String?
    kanbanStateId String
    kanbanState   KanbanState  @relation(fields: [kanbanStateId], references: [id])
    userProfile   UserProfile  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

    @@index([user_id], name: "idx_kanbantask_user") // ✅ Added index for performance
    @@schema("public") // Explicitly state it belongs to public
}

model KanbanColumn {
    id            String      @id @default(uuid())
    title         String
    kanbanStateId String
    kanbanState   KanbanState @relation(fields: [kanbanStateId], references: [id])

    @@schema("public") // Explicitly state it belongs to public
}

enum LeadPriority {
    low
    medium
    high

    @@schema("public") // Explicitly state it belongs to public
}

// Enums for statuses, call types, and message types
enum CampaignStatus {
    delivered
    delivering
    failed
    pending
    completed
    missed
    queued
    read
    unread

    @@schema("public") // Explicitly state it belongs to public
}

enum CallType {
    inboundPhoneCall
    outboundPhoneCall
    webCall

    @@schema("public") // Explicitly state it belongs to public
}

enum MessageType {
    TYPE_SMS
    TYPE_EMAIL

    @@schema("public") // Explicitly state it belongs to public
}

// TextCampaign Message Model
model TextMessage {
    id             String       @id @default(uuid())
    type           Int // E.g., 1 for SMS, 3 for EMAIL
    messageType    MessageType
    locationId     String
    contactId      String
    conversationId String
    dateAdded      DateTime
    body           String?
    direction      String // 'inbound' or 'outbound'
    status         String // Use enums if needed
    contentType    String
    meta           Json?
    source         String? // E.g., 'workflow', 'bulk_actions'
    userId         String?
    textCampaignId String
    textCampaign   TextCampaign @relation(fields: [textCampaignId], references: [id])

    // Relation to attachments
    attachments TextMessageAttachment[]

    @@schema("public") // Explicitly state it belongs to public
}

model TextMessageAttachment {
    id            String      @id @default(uuid())
    url           String // URL or file path of the attachment
    textMessageId String
    textMessage   TextMessage @relation(fields: [textMessageId], references: [id])

    @@schema("public") // Explicitly state it belongs to public
}

// Email Campaign Message Model
model EmailMessage {
    id               String   @id @default(uuid())
    altId            String?
    threadId         String
    locationId       String
    contactId        String
    conversationId   String
    dateAdded        DateTime
    subject          String?
    body             String
    direction        String // 'inbound' or 'outbound'
    status           String // Use enums if needed
    contentType      String
    provider         String // 'Leadconnector', 'Gmail', etc.
    from             String
    replyToMessageId String?
    source           String?

    emailCampaignId String
    emailCampaign   EmailCampaign @relation(fields: [emailCampaignId], references: [id])

    // Relations to other models
    attachments EmailAttachment[]
    recipients  EmailRecipient[]

    @@schema("public") // Explicitly state it belongs to public
}

model EmailAttachment {
    id             String       @id @default(uuid())
    url            String
    emailMessageId String
    emailMessage   EmailMessage @relation(fields: [emailMessageId], references: [id])

    @@schema("public") // Explicitly state it belongs to public
}

model EmailRecipient {
    id             String       @id @default(uuid())
    email          String
    type           String // 'to', 'cc', 'bcc'
    emailMessageId String
    emailMessage   EmailMessage @relation(fields: [emailMessageId], references: [id])

    @@schema("public") // Explicitly state it belongs to public
}

// Call Campaign Details Model
model CallDetail {
    id                 String    @id @default(uuid())
    orgId              String
    type               CallType
    phoneCallProvider  String // 'twilio', 'vonage', 'vapi'
    phoneCallTransport String // 'sip', 'pstn'
    status             String // Use enums if needed
    endedReason        String?
    messages           Json // Store as JSON for now
    destination        Json?
    createdAt          DateTime
    updatedAt          DateTime
    startedAt          DateTime?
    endedAt            DateTime?
    cost               Float
    costBreakdown      Json
    transcript         String
    recordingUrl       String?
    stereoRecordingUrl String?
    artifact           Json?
    analysis           Json?
    assistantId        String?

    callCampaignId String
    callCampaign   CallCampaign @relation(fields: [callCampaignId], references: [id])

    @@schema("public") // Explicitly state it belongs to public
}

// Social Media Campaign Action Model
model SocialAction {
    id           String  @id @default(uuid())
    status       String // 'pending', 'successful', 'failed'
    attempt      Int
    successful   Int
    failed       Int
    viewLink     String
    type         String // Store action type as a string (Twitter, LinkedIn, Instagram actions)
    replyMessage String?

    socialMediaCampaignId String
    socialMediaCampaign   SocialMediaCampaign @relation(fields: [socialMediaCampaignId], references: [id])

    @@schema("public") // Explicitly state it belongs to public
}

// Campaign Models
model TextCampaign {
    id                          String                      @id @default(uuid())
    phoneNumber                 String
    message                     String
    sentAt                      DateTime
    status                      CampaignStatus // Use enum for status
    companyCampaignsuser_id     String
    companyCampaignsUserProfile CompanyCampaignsUserProfile @relation(fields: [companyCampaignsuser_id], references: [id])
    name                        String
    goal                        String?
    startDate                   DateTime
    endDate                     DateTime?
    aiVoice                     String?
    aiScript                    String?
    updatedAt                   DateTime?
    aiAvatarAgent               String?

    // Relation to messages
    messages TextMessage[]

    @@schema("public") // Explicitly state it belongs to public
}

model EmailCampaign {
    id                          String                      @id @default(uuid())
    senderEmail                 String
    recipientCount              Int
    sentCount                   Int
    deliveredCount              Int
    status                      CampaignStatus
    companyCampaignsuser_id     String
    companyCampaignsUserProfile CompanyCampaignsUserProfile @relation(fields: [companyCampaignsuser_id], references: [id])
    name                        String
    goal                        String?
    startDate                   DateTime
    endDate                     DateTime?
    aiVoice                     String?
    aiScript                    String?
    updatedAt                   DateTime?
    aiAvatarAgent               String?

    // Relation to emails
    emails EmailMessage[]

    @@schema("public") // Explicitly state it belongs to public
}

model CallCampaign {
    id                          String                      @id @default(uuid())
    callerNumber                String
    receiverNumber              String
    duration                    Int
    callType                    CallType
    status                      CampaignStatus
    companyCampaignsuser_id     String
    companyCampaignsUserProfile CompanyCampaignsUserProfile @relation(fields: [companyCampaignsuser_id], references: [id])
    name                        String
    goal                        String?
    startDate                   DateTime
    endDate                     DateTime?
    aiVoice                     String?
    aiScript                    String?
    updatedAt                   DateTime?
    aiAvatarAgent               String?

    // Relation to call details
    callDetails CallDetail[]

    @@schema("public") // Explicitly state it belongs to public
}

model SocialMediaCampaign {
    id                          String                      @id @default(uuid())
    platform                    String
    senderHandle                String
    receiverHandle              String
    hashtags                    Json
    status                      CampaignStatus
    companyCampaignsuser_id     String
    companyCampaignsUserProfile CompanyCampaignsUserProfile @relation(fields: [companyCampaignsuser_id], references: [id])
    name                        String
    goal                        String?
    startDate                   DateTime
    endDate                     DateTime?
    aiVoice                     String?
    aiScript                    String?
    updatedAt                   DateTime?
    aiAvatarAgent               String?

    // Relation to social actions
    actions SocialAction[]

    @@schema("public") // Explicitly state it belongs to public
}

model AIKnowledgebase {
    id      String @id @default(uuid())
    user_id String @unique

    emailTemplate       String?
    salesScript         String?
    assignedAssistantID String
    assignedSquadID     String
    recordings          Recording   @relation(fields: [recordingId], references: [id])
    aiAvatar            AIAvatar?   @relation(fields: [aIAvatarId], references: [id])
    background          Background? @relation(fields: [backgroundId], references: [id])
    userProfile         UserProfile @relation(fields: [user_id], references: [user_id])
    recordingId         String
    aIAvatarId          String?
    backgroundId        String?

    @@schema("public") // Explicitly state it belongs to public
}

model BillingHistoryItem {
    id          String        @id @default(uuid())
    user_id     String
    invoice     String
    amount      String
    date        DateTime
    status      BillingStatus
    userProfile UserProfile   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

    @@index([user_id], name: "idx_billing_user") // ✅ Add an index for faster lookups
    @@schema("public") // Explicitly state it belongs to public
}

model PaymentDetails {
    id           String      @id @default(uuid())
    user_id      String      @unique
    cardType     String
    cardLastFour String
    expiry       String
    userProfile  UserProfile @relation(fields: [user_id], references: [user_id])

    @@schema("public") // Explicitly state it belongs to public
}

model AICredits {
    id             String                  @id @default(uuid())
    allotted       Int
    used           Int
    resetInDays    Int
    subscription   UserProfileSubscription @relation(fields: [subscriptionId], references: [id])
    subscriptionId String                  @unique

    @@schema("public") // Explicitly state it belongs to public
}

model LeadCredits {
    id             String                  @id @default(uuid())
    allotted       Int
    used           Int
    resetInDays    Int
    subscription   UserProfileSubscription @relation(fields: [subscriptionId], references: [id])
    subscriptionId String                  @unique

    @@schema("public") // Explicitly state it belongs to public
}

model SkipTraceCredits {
    id             String                  @id @default(uuid())
    allotted       Int
    used           Int
    resetInDays    Int
    subscription   UserProfileSubscription @relation(fields: [subscriptionId], references: [id])
    subscriptionId String                  @unique

    @@schema("public") // Explicitly state it belongs to public
}

model Recording {
    id              String            @id @default(uuid())
    customVoiceID   String
    voiceClone      VoiceClone?       @relation(fields: [voiceCloneId], references: [id])
    voicemailFile   String
    AIKnowledgebase AIKnowledgebase[]
    voiceCloneId    String?

    @@schema("public") // Explicitly state it belongs to public
}

model VoiceClone {
    id            String      @id @default(uuid())
    audioFile     String
    clonedVoiceID String
    Recording     Recording[]

    @@schema("public") // Explicitly state it belongs to public
}

model AIAvatar {
    id               String            @id @default(uuid())
    avatarKandidFile String
    avatarMotionFile String
    videoDetails     VideoDetails      @relation(fields: [videoDetailsId], references: [id])
    AIKnowledgebase  AIKnowledgebase[]
    videoDetailsId   String

    @@schema("public") // Explicitly state it belongs to public
}

model VideoDetails {
    id          String     @id @default(uuid())
    title       String
    description String
    ctaText     String
    ctaLink     String
    AIAvatar    AIAvatar[]

    @@schema("public") // Explicitly state it belongs to public
}

model Background {
    id                  String            @id @default(uuid())
    backgroundVideoFile String
    backgroundMusic     String
    colorScheme         ColorScheme       @relation(fields: [colorSchemeId], references: [id])
    AIKnowledgebase     AIKnowledgebase[]
    colorSchemeId       String

    @@schema("public") // Explicitly state it belongs to public
}

model ColorScheme {
    id             String       @id @default(uuid())
    primaryColor   String
    secondaryColor String
    accentColor    String?
    Background     Background[]

    @@schema("public") // Explicitly state it belongs to public
}

enum SubscriptionType {
    monthly
    yearly

    @@schema("public") // Explicitly state it belongs to public
}

enum SubscriptionStatus {
    active
    inactive

    @@schema("public") // Explicitly state it belongs to public
}

enum BillingStatus {
    Paid
    Unpaid

    @@schema("public") // Explicitly state it belongs to public
}

enum IntegrationStatus {
    connected
    disconnected

    @@schema("public") // Explicitly state it belongs to public
}

enum TeamMemberRole {
    admin
    member

    @@schema("public") // Explicitly state it belongs to public
}

enum TwoFactorMethods {
    sms
    email
    authenticatorApp

    @@schema("public") // Explicitly state it belongs to public
}
